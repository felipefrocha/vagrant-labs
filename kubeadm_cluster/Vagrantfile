Vagrant.configure("2") do |config|
  # config.vm.box         = "hashicorp/bionic64"
  config.vm.box         = "generic/ubuntu2004"
  config.vm.box_check_update = true

  # Load balancer for this implementation
  #  config.vm.define "loadbalancer" do |lb|
  #   lb.vm.hostname = "loadbalancer"
  #   lb.vm.network "public_network", ip: "192.168.15.70", bridge: "enp1s0"
    
  #   # Define lb size
  #   lb.vm.provider "virtualbox" do |vb|
  #       vb.memory = "512"
  #       vb.cpus = 1
  #       vb.customize ["modifyvm", :id, "--cpuexecutioncap", "10"]
  #   end
  #   # Point Local hostname to eth1
  #   lb.vm.provision :shell, 
  #     inline: "sudo apt update && sudo apt install -y net-tools"
  #   # Point Local hostname to eth1
  #   lb.vm.provision :shell, 
  #     inline: "sed 's/127\.0\.0\.1.*loadbalancer.*/192.168.15.70 loadbalancer/' -i /etc/hosts"
    
  #   # default router
  #   lb.vm.provision "shell",
  #     run: "always",
  #     inline: "route add default gw 192.168.15.1"

  #   # delete default gw on eth0
  #   lb.vm.provision "shell",
  #     run: "always",
  #     inline: "eval `route -n | awk '{ if ($8 ==\"eth0\" && $2 != \"0.0.0.0\") print \"route del default gw \" $2; }'`"
  #   # Define service
  #   lb.vm.provision "shell",
  #     inline: "sudo apt update && sudo apt install -y curl wget && curl -fsSL https://get.docker.com | sudo bash - && sudo usermod -aG docker $USER"
  #   lb.vm.provision "shell",
  #     inline: "sudo curl -L 'https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)' -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose"
  #   # Define service
  #   lb.vm.provision "file", source: "./nginx", destination: "~/nginx"
  #  end

  
  N=3
  (1..N).each do |machine_id|
    config.vm.define "machine#{machine_id}" do |machine|
      machine.vm.hostname = "machine#{machine_id}"
      machine.vm.network "public_network", ip: "192.168.15.#{70+machine_id}", bridge: "enp1s0"
      # Define machine size
      machine.vm.provider "virtualbox" do |vb|
        vb.memory = "2048"
        vb.cpus = 2
        vb.customize ["modifyvm", :id, "--cpuexecutioncap", "#{100/N}"]
      end 
        
      # Only execute once the Ansible provisioner,
      # when all the machines are up and ready.
      if machine_id == N
        machine.vm.provision :ansible do |ansible|
          # Disable default limit to connect to all the machines
          ansible.limit = "all"
          ansible.playbook = "provisioning/main.yml"
          ansible.verbose = true
          # ansible.galaxy_role_file = "provisioning/requirements.yml"
          # ansible.galaxy_roles_path = "provisioning/roles/"
          ansible.groups = {
            "masters" => [],
            "masters:children" => ["mac1","mac2","mac3"],
            "master_node" => [],
            "master_node:children" => ["mac1"],
            "join_masters" => [],
            "join_masters:children" => ["mac2","mac3"],
            "workers" => [],
            "workers:children" => ["mac4","mac5","mac6"],
            "all:children" => ["masters","workers"],
            "all:vars" => {"ansible_python_interpreter" => "/usr/bin/python3",
               "user" => "vagrant"},
            "mac1" => ["machine1"],
            "mac2" => ["machine2"],
            "mac3" => ["machine3"],
            "mac4" => ["machine4"],
            "mac5" => ["machine5"],
            "mac6" => ["machine6"],
            "mac1:vars" => {"hostname.name" => "master1", "hostname.enabled" => "False"},
            "mac2:vars" => {"hostname.name" => "master2", "hostname.enabled" => "False"},
            "mac3:vars" => {"hostname.name" => "master3", "hostname.enabled" => "False"},
            "mac4:vars" => {"hostname.name" => "worker1", "hostname.enabled" => "False"},
            "mac5:vars" => {"hostname.name" => "worker2", "hostname.enabled" => "False"},
            "mac6:vars" => {"hostname.name" => "worker3", "hostname.enabled" => "False"},
          }
        end
      end
    end
  end
end
